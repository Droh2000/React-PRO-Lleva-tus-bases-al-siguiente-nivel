Vamos a tomar todo el componentes que hemos construido y lo vamos a desplegar a NPM
ya que no tiene sentido crear nuestros componentes personalizados para que el dia de mañana
solo se use Ctr+C y Ctr+V, adeas que asi tendremos el dia de mañana que queramos actualizar
el componente
Aqui vamos a usar la herramiendo de TSDX que ya hace mucho trabajo por nosotros como crear
los archivos de definicion de TS (Arcivo.d.ts) donde configuramos para que se respete el 
tipado de dato, autocompletado y manejo de errores

Tenemos que crearnos toda una serie de archivos y directorios que nos pide NPM para poder hacer
un despliegue, con este comando creamos todo lo necesario para que sea un paquete de tipo NPM

    * npx tsdx create Nombre-Paquete

En el README colocamos lo que hace nuestro paquete
En el package.json colocamos: 
    * version
    * Los archivos que queremos incluir
    * "peerDependencies" -> Esto es algo que nuestro paquete requiere de manera implicita que adiferencia 
        de las "dependencies" normales, estas son las dependencias que los usuarios consumidores tienen 
        que satisfacer 
En el SRC es donde vamos a desplegar el componente
La carpeta "exmple" es un codigo de ejemplo que dejamos para que los usuarios consumidores sepan como se utiliza nuestro componente
La carpeta "dist" es todo lo que las personas terminaran importando de nuestra aplicacion y consumiendo

De nuestro proyecto de la aplicacion hay que hacer preparaciones y mover lo que nececitamos, ademas hay que preparar el 
"Index.ts" para cuando hagan una importacion de nuestro paquete facilmente podran tomar lo que neseciten pero a la vez no queremos
perder la estructura de las carpetas porque asi es como podemos seguir dando mantenimiento asi que movemos todas
las carpetas al SRC (Despues dejamos solo lo que requerimos)

Despues de hacer los cambios, por el momento no sabemos si todo esta funcionando pero podemos ejectuar el comando de 
    * yarn start
Esto nos dara un error "Failed to Compile" ya q ue estamos importando algo que no es JS en el archivo de ProductCard 
en la importacion de CSS, tenemos que configurar el proyecto para permitir la importacion de estilos como modulos

Si no estamos usando los modulos de CSS no hay necesidad de hacer esta configuracion pero ademas tambien tenemos que hacer esta configuracion
porque estamos cargando una imagen
    * Para esto nos creamos el archivo "tsdx.config.js"
    De aqui seguimos los pasos del PDF en el paso 3
    Con esto le decimos a TSDX como cargar las imagenes y como cargar los modulos de CSS

    Despues de esto nos creamos el archivo de definicion de TS para indicarle a TS como sean cargados los modulos

    Al final si al ejecutar el comando: yarn start nos da erro, una solucion es que tengamos que agregar el import de React en cada uno de los componentes
    donde estamos retornando un JSX
        * Si sale "Compiled Successfully" entonces todo esta OK ya con Ctrl+C cancelamos

    Luego ejecutamos el paso 4
        Esto nos crea la carpeta Dist 
        Si estubieramos trabajando en TS y solo en JS seria conveniente que definamos los PropsTypes para tener los tipos de las propiedades
        aunque estemos trabajando en JS