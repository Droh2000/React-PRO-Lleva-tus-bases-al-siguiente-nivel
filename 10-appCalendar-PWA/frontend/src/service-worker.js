/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
// En seta parte se esta haciendo la verificacion del URL de la request que se esta solicitando y preguntar el modo, la URL
// Esto tiene diferentes estrategias y las veremos a mas a detalle cuando implementemos el PWA de manera manual
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

// Vamos a implementar la logica aqui arriba sin WORKBOX, usando toda la configuracion manual de la PWA
// self -> Hace referencia al ServiceWorker como tal
// addEventListener -> Es para agregar un evento, esto lo se ejecutara cuando se haga la instalacion
// Cuando estamos en el proceso de instalacion queremos dispara el Callback que declaramos
self.addEventListener( 'install', (evento) => {
  // Este mensaje solo veremos la primera que entremos a la pagina, si recargamos de ahi en adelante no volveremos a ver el mensaje
  // Porque el navegador detecta que el Service Worker es el mismo, no hubo cambios (Sigue teniendo el contro el Service Worker anterior)
  // Para que el nuevo Service Worker tome el control en la parte de Application-En la opcion del Service Worker tendremos para precionar
  // la opcion del SkipWaitting, con este detenemos el SW anterior y entra el nuevo (El cual tiene este mensaje que pusimos)
  console.log('Instalando');
});
// Despues de cada modificacion tenemos que ejecutar el comando del "yarn build"
// y cuando termine ejecutamos el "serve -s build"