/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
// En seta parte se esta haciendo la verificacion del URL de la request que se esta solicitando y preguntar el modo, la URL
// Esto tiene diferentes estrategias y las veremos a mas a detalle cuando implementemos el PWA de manera manual
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

// Vamos a implementar la logica aqui arriba sin WORKBOX, usando toda la configuracion manual de la PWA
// self -> Hace referencia al ServiceWorker como tal
// addEventListener -> Es para agregar un evento, esto lo se ejecutara cuando se haga la instalacion
// Cuando estamos en el proceso de instalacion queremos dispara el Callback que declaramos
self.addEventListener( 'install', async (evento) => {
  // Este mensaje solo veremos la primera que entremos a la pagina, si recargamos de ahi en adelante no volveremos a ver el mensaje
  // Porque el navegador detecta que el Service Worker es el mismo, no hubo cambios (Sigue teniendo el contro el Service Worker anterior)
  // Para que el nuevo Service Worker tome el control en la parte de Application-En la opcion del Service Worker tendremos para precionar
  // la opcion del SkipWaitting, con este detenemos el SW anterior y entra el nuevo (El cual tiene este mensaje que pusimos)
  console.log('Instalando');

  // En este evento de Instalacion lo que se hace es que automaticamente se descarge en el cache recursos estaticos del Sitio Web y no solo 
  // se puede con los archivos que tenemso dentro de la carpeta build sino que podemos cargar cualquier otro recurso
  // Podemos hacer referencia al espacio del disco duro del cliente, que seria la parte del "Cache" en el menu de Application, donde nos podemos crear
  // varios caches (Con esta funcion "Open" podemos regresar el espacio en memoria del nombre del cache que especifiquemos), la idea de pasarle aqui el nombre
  // es que los podemos agrupar como nosotros requieramos (Como esto es una promesa, agregamos esta funcion como Async)
  const cache = await caches.open('cache-1'); // Este es nuestro espacio para poder gaurdar informacion
  
  // Estos son los datos que queremos guardar, dentro dle arreglo le definimos las URLs que podemos guardar en el cache (Esto tambien es una promesa)
  // El uso del Await es para asegurarnos a que se termine de ejecutar la tarea y se tenga completada la informacion
  await cache.addAll([
    'https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css',
    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.0-2/css/all.min.css',
    // Tambien podemos poner rutas relativas donde tengamos archivos que queramos almacenar
    '/favicon.ico'
  ]);
  // Aqui solo estamos guardando en Cache, no estamos leyendo nada, es decir en el proces de instalacion del SW, va a realizar estas descargar del Arreglo
  // va a colocar los archivos en el cache que le estamos especificando (Despues de estos cambios tenemos que ejecutar los dos comando y precionar el SkipWitting)
  // Despues de esto tendremos en la parte del Cache nuestro "cache-1" donde tendremos los archivos que especificamos
  // En esta parte colocamos todos los recursos que nuestra aplicacion requiere para funcionar
});

// Vamos a ejecutar otro ciclo de vida que es el que se dispara hacer todas las estrategias del cache
// Con "fetch" hace que se ejecute en cualquier peticion
self.addEventListener( 'fetch', ( event ) => {
  // Vamos a mostrar la peticion que se realiza
  // Veremos en la consola cada vez que recargemos el navegador informacion de todos los request que se realizaron
  // esto significa que todas las request son pasadas al Service Worker y este sabe cuando la request requiere o no el SW entonces no se hace nada
  // pero si la request retorna algo y eso sea una Response, ahi podemos agregar logica para mostrar al usuario que si por ejemplo en cierta parte
  // de la pagina, no se puede trabaja de manera Offline, solo se muestra un mensaje que es mejor que decir que no hay conexion a internet
  // console.log( event.request.url );

  // Hay varias implementaciones para esta estrategia
  // Este es el request que queremos verificar y decimos que si es cualquier URL exceptuando el que queremos verificar entonces nos saque
  // Asi la logica que pondremos abajo solo aplicara para esta peticion y las demas que se ejecutan no les afecta
  if( event.request.url !== 'http//localhost:4000/api/auth/renew' ) return;

  // Queremos ir al backend y que este nos resoponda la peticion
  // Aqui estamo suando el FetchAPI y le pasamos la request que viene en el evento
  const resp = fetch( event.request )
    // Si se ejecuta este .then quiere decir que se logro llegar a la request y se tiene la informacion de la response
    // Si tenemos una respuesta entonces regresamos esa informacion
    .then( response => {
      // Esta respuesta la tenemos que clonar si la queremos usar mas de una vez (Esta clonada es la que usaria el navegador web)
      return response.clone();
    })
    // Hay que estar pendientes si hay un erro porque si eso pasa fallaria y solo funcionaria si hay internet (Seria Network Only)
    .catch(err => {
      console.log('offline response');
      // Deberiamos retornar algo que este en el cache pero en este punto no sabemos que

    });

    // Vamos a responder con lo que nos regresa la promesa de arriba
    event.respondeWith( resp );
});



// Despues de cada modificacion tenemos que ejecutar el comando del "yarn build"
// y cuando termine ejecutamos el "serve -s build"
// En el Manu-Application-Service Workers- skipWaiting