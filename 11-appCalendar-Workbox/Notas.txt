Implementacion de la PWA usando Workbox

En esta parte Borramos todo lo que hicimos en la seccion anterior porque ahora lo vamos a crear de manera automatica

Tenemos diferentes formas para trabajar el Service Worker, una es usando el CLI de worbox para ayudarnos a generar el SW de manera automatica
pero igual podemos hacer configuraciones manuales
Primero tenemos que instalar este comando en una terminal como administrador:
    * npm install workbox-cli --global
Despues de la instalacion tenemos que cerrar todo el VS code y volver a ejecutar los servicios

Ubicandonos en la terminal de VS code en la carpeta de Fronted ejecutamos
    * workbox wizard
    Despues nos pregunta cual es el directorio que queremos desplegar
    * Elegimos "build" que es la carpeta que queremos publicar y ahi es donde colocara el Service Worker
    Despues nos pregunta los archivos que va a ejecutar (Los archivos que seran almacenados en cache)
    Como queremos mantener todos los archivos solo precionamos ENTER
    Despues nos pregunta donde queremos guardar el service worker, dejamos la ruta por defecto solo precionando ENTER
    Luego nos pregunta si queremos guardar las opciones en un archivo de configuracion (Solo precionamos ENTER)
    Por ultimo escribimos N de no porque nuestro proyecto no incluye ese archivo que nos pregunta

Despues de esto tendremos creado el archivo del "workbox-config" para generar el Service Worker tenemos que ejecutar el comando
    * workbox generateSW workbox-config.js

Ahora si dentro de la carpeta de Build/static tendremos el Service worker, estos archivos generados no los deberiamos de tocar nunca porque
son geenrados basado en la configuracion del service worker

Si ejecutamos el comando "serve -s build" (El comanod que genera el Service Worker se ejecuara cada vez que la aplicacion sufra cambios internos
pero este proceso igual se puede automatizar), despues de ejecutar el comando veremos en la pestana de Application que no aparece el SW porque como hizimos la configuracion manual
tenemos que decirle a la aplicacion de React que instale el SW (Esto lo hacemos en el archivo INDEX.HTML de la carpeta PUBLIC)

Despues de la instalacion del SW en la pestana de Application en el apartado del Cache del Cache Storage tenemos un "workbox-precache" donde veremos todo el monton de archivos
que se estan almacenando que seria todo lo que tenemos en la varpeta build, si cambiamos a la opcion de "OFFLINE" veremos que nuestra app no se cae pero tenemos el 
problema que se queda con el mensaje de Espere... por lo que tenemos que arreglar ese problema

Ahora Workbox nos genera automaticamente dentro de la carpeta build los archivos del SW, el problema de esa configuracion es que no tenemos control de lo que realizo por defecto
la idea es que nosotros configuremos el SW y sea Workbox quien lea la carpeta del Build y ahi coloque los archivos de la app de React
Cuando ejecutamos el comando del:
    * workbox generateSW workbox-config.js
Esto lo crea de manera por defecto y usa la configuracion que este en ese archivo pero ahora vamos a usar otra forma para meterle el SW pero que no podremos usar el comando de arriba
porque ese comando solo se puede usar cuando dentro del archivo se emplea codigo que solo es entendible por ese comando

Dentro de la carpeta SRC creamos el archivo "sw-template" que sera para que el Workbox tome y en base a ese contruya el SW
Despues de las implementacion en los archivo ya no podremos ejcutar el comando de arriba porque nos dara error, el comando que ejecutaremos ahora:
    * workbox injectManifest
Despues de esto ejecutamos el comando del "serve -s build", para que se active precionamos el "skipWaiting"
Para verificar que toma las nueva configuracion si nos vamos al arcihvo de "sw.js" en la carpeta de "build" veremos que el codigo es mas sencillo
Ahora tenemos el control absoluto del SW y podemos implementar diferentes tecnicas que estan en la documentacion de Workbox sin importar si estamos en una aplicacion de React, Angular o lo que sea
Por ultimo configuramos el comando en el "package.json" para que se ejecute automaticamente para que cuando se haga el Build automaticamente ejecute ese comando

Despues de los cambios implementados en el archivo de "sw-template.js" y la ejecucion de los comandos, si nos vamos a la pestana de Application en la parte del Cache, del Cache Storage tenemos ahora dos
que son el precache-v2 y el workbox-runtime donde tenemos el Boostrap almacenado y nos vamos a la pestana de Network vemos que fue servido del ServiceWorker, hay varias tecnicas que podemos emplear como guardarlo
en un cache especial, plugins para indicar el tiempo en el que va a vivir los datos, esto seria por ejemplo para el JWT que solo tiene cierto tiempo de vida entonces si sacamos ese tiempo
no tiene sentido seguir almacenando ese Token si ya expiro

En este punto si queremos ejecutar un POST para crear nuevos datos, la parte del posteo de manera Offline requiere mucho mas trabajo como crearse una base de datos local pero con Workbox ya tenemos esa BD y crear
todo lo demas mas facil (Podemos instalar mas modulos que requieramos)

    BackgroundSync (Hacer Posteos sin Conexion)

        Debemos ser eficientes con los datos que almacenemos de los post, es recomendable no pasarse de los 30 megas en los datos que almacenemos
        ademas le damos un tiempo en el que si la persona nunca se conecto a internet despues de cierto tiempo se borran los posts, ademas que saber que todo esto es volatil
        y la persona puede borrar estos datos, borrando el cache o el historial de navegador, se eliminaran todos los datos que almacenemos

        En pocas palabras, creamos el Pulgin y este es lo que almacenamos dentro de la estrategia en el Network Only, se usa esa estrategia porque las peticiones
        que no sean GET solo funcionan con esta estrategia

        Despues de la implementacion en el archivo de "sw-template" y ejecutados los comandos, si nos vamos a la pestana para activar el modo Offline y hacemos un POST
        en la consola veremos un error pero es diferente ya por defecto con la estrategia del NetworkOnly da ese mensaje pero tambien 
        podemos retornar un mensaje para que nuestra aplicacion lo maneje (Esto lo haremos mas adelante)
        Si nos vamos al pestana de Application en la parte del Storage en el IndexDB tenemos dentro el "workbox-backgroun-sync" dentro estan los request donde esta el "queue name"
        donde en el contenido esta el nombre que le especificamos de "posteo-offline", Si recargamos el navegador WEB no veremos el evento en la aplicacion
        Pero si desactivamos la opcion Offline, el navegador web hara automaticamente el Posteo (No aparece la informacion en la aplicacion porque no estamos trabajando con
        web sockets) asi que para ver los datos tenemos que volver a recargar el navegador WEB 

Otra caracteristica importante que tenemos es el "MANIFEST" que esta en la pestana de Application en la primera opcion del menu lateral
aqui dice cual es el color de la aplicacion, lo iconos, esto lo crea por defecto el NPX react APP, este archivo lo podemos configurar desde
la carpeta build, aqui dentro del "manifest.json" le podemos poner el nombre de la aplicacion (Pero estos cambios no se hacen aqui porque esta carpeta
se borra y vuelve a generar cada vez que ejecutamos el comando), los cambios se hacen en la carpeta Public/manifest.json
Como hizimos cambios en la aplicacion de REACT hay que ejecutar el "yarn build", ejecutar el de Serve, recargar pagina, precionar el boton para que no Waitting
y asi veremos los cambios
